{
  "Jest Test": {
    "prefix": ["test:tpl"],
    "body": [
      "// import { ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} } from '@/frontend/data/usecases/${TM_FILENAME_BASE}'",
			"",
			"type SutTypes = {",
			"  sut: any",
			"}",
			"",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
			"  // constructor(private readonly name) {}",
			"",
			"  add(): SutTypes {",
			"    return {",
			"      sut: {}",
			"    }",
			"  }",
			"}",
			"",
			"const makeSut = (): SutTypes => {",
			"  const sut = new ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}()",
			"",
			"  return {",
			"    sut",
			"  }",
			"}",
			"",
			"describe('${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} SmokeTest UseCases', () => {",
			"  test('Should be exists a ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}', () => {",
			"    expect(${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}).toBeDefined()",
			"  })",
			"",
			"  test('Should be exists a add method on ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}', () => {",
			"    const { sut } = makeSut()",
			"",
			"    expect(sut.add).toBeDefined()",
			"  })",
			"})",
			"",
			"describe('${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} UseCases', () => {",
			"  test('Should call ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} with correct params', () => {",
      "    const { sut } = makeSut()",
      "    const addSpy = jest.spyOn(sut, 'add')",
      "    const anyParams = {anyKey: 'any-vaue'}",
      " ",
      "    sut.add(anyParams)",
  
      "    expect(addSpy).toHaveBeenCalledWith(addTodoParams)",
      "  })",
      " ",
      "  test('Should call ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} be called time once', async () => {",
      "     const { sut } = makeSut()",
      "     const addSpy = jest.spyOn(sut, 'add')",
      "     ",
      "     await sut.add()",
      "     ",
      "     expect(addSpy).toHaveBeenCalledTimes(1)",
      "  })",
      " ",
      "  test('Should throw if ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} throws', async () => {",
      "     const { sut, ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Spy } = makeSut()",
      "     jest",
      "     .spyOn(${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Spy, 'generate')",
      "     .mockImplementationOnce(throwError)",
      " ",
      "     const promise = sut.add(addTodoParams)",
      " ",
      "     await expect(promise).rejects.toThrow()",
      "  })",
      " ",
      "  test('Should throw if ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} validate return false', async () => {",
      "     const { sut, ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Spy } = makeSut()",
      " ",
      "     jest",
      "     .spyOn(${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Spy, 'validate')",
      "     .mockReturnValueOnce(Promise.resolve(false))",
      " ",
      "     const promise = sut.add({",
      "       todoName: 'Todo Name'",
      "     })",
      " ",
      "    await expect(promise).rejects.toThrow()",
      "  })",
			"})",
			""
    ],
    "description": "A describe block for Jest"
  },
  "React FC": {
    "prefix": ["rfc"],
    "body": [
      "import React from 'react'",
      "import Styles from './${TM_FILENAME_BASE}-styles.scss'",
      "",
      "const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} React.FC = () => {",
      "  return (",
      "    <div className={Styles.${TM_FILENAME_BASE/([a-z]*)[-]+([a-z]*)/$1${2:/capitalize}/g}Wrap}>",
      "",
      "    </div>",
      "  )",
      "}",
      "",
      "export default ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}",
      ""
    ],
    "description": "Boilerplate for React Function Component"
  },
  "Class Generic": {
    "prefix": ["class:tpl"],
    "body": [
      "// import { ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} } from '@/frontend/data/usecases/${TM_FILENAME_BASE}'",
      "",
      "export class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
      "  // constructor(private readonly name: string) {}",
      "  method(): void {}",
      "}",
      ""
    ],
    "description": "Boilerplate for React Function Component"
  }
}